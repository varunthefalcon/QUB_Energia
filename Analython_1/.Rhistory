# The percentage of training set depends on a number of factors (to be discussed later) but for now let's set the train set to consist of 80% randomly selected observations while the test set should consist of the remaining 20%
in_train <- createDataPartition(data$heart_attack, p = 0.8, list = FALSE)
in_train
# The percentage of training set depends on a number of factors (to be discussed later) but for now let's set the train set to consist of 80% randomly selected observations while the test set should consist of the remaining 20%
in_train <- createDataPartition(data$heart_attack, p = 0.8, list = TRUE)
in_train
# Let's compare histograms
ggplot(data, aes(x = bmi)) +
geom_histogram(bins = 4) +
labs(title = "Patients",
x = "BMI")
hist(data$bmi)
# We can load in data if it's from a package in R
data<- nhanes
# Let's compare histograms
ggplot(data, aes(x = bmi)) +
geom_histogram(bins = 4) +
labs(title = "Patients",
x = "BMI")
hist(data$bmi)
# There are lots of types of plots and some were covered in DSA8001. There are also lots of packages that make nice plots. ggplot2 is a great package.
?ggplot
# Let's compare histograms
ggplot(data, aes(x = bmi)) +
geom_histogram(bins = 4) +
labs(title = "Patients",
x = "BMI")
hist(data$bmi)
# Let's add in the heart attack variable and do other things with ggplot2
ggplot(data, aes(x = bmi, fill=heart_attack)) +
geom_histogram(bins = 4) +
labs(title = "Patients",
x = "BMI")
# Let's compare histograms
ggplot(data, aes(x = bmi)) +
geom_histogram(bins = 4) +
labs(title = "Patients",
x = "BMI")
hist(data$bmi)
# Let's compare histograms
ggplot(data, aes(x = bmi)) +
geom_histogram() +
labs(title = "Patients",
x = "BMI")
# It might be easier to write things this way...
g <- ggplot(data, aes(heart_attack))
# It might be easier to write things this way...
g <- ggplot(data, aes(heart_attack))
# If we fill by heart_attack as the factor variable, we can do lots of different things
g + geom_bar(aes(fill = heart_attack))
data$heart_attack<- c(1,1,0,0,1,0,0,0,0,1,0,1,0)
# It might be easier to write things this way...
g <- ggplot(data, aes(heart_attack))
# If we fill by heart_attack as the factor variable, we can do lots of different things
g + geom_bar(aes(fill = heart_attack))
heart_attack<- c(1,1,0,0,1,0,0,0,0,1,0,1,0)
# It might be easier to write things this way...
g <- ggplot(data, aes(heart_attack))
# If we fill by heart_attack as the factor variable, we can do lots of different things
g + geom_bar(aes(fill = heart_attack))
data$heart_attack<-as.factor(data$heart_attack)
data$heart_attack<- c(1,1,0,0,1,0,0,0,0,1,0,1,0)
data$heart_attack<-as.factor(data$heart_attack)
data$heart_attack<- c(1,1,0,0,1,0,0,0,0,1,0,1,0)
# We can load in data if it's from a package in R
data<- nhanes
data$heart_attack<- c(1,1,0,0,1,0,0,0,0,1,0,1,0)
# We can load in data if it's from a package in R
data<- nhanes
# Let's just use the data where there is complete data for now.
data<-na.omit(data)
data$heart_attack<- c(1,1,0,0,1,0,0,0,0,1,0,1,0)
data$heart_attack<-as.factor(data$heart_attack)
# It might be easier to write things this way...
g <- ggplot(data, aes(heart_attack))
# If we fill by heart_attack as the factor variable, we can do lots of different things
g + geom_bar(aes(fill = heart_attack))
# Note the bin width
ggplot(data, aes(x=bmi, fill=heart_attack)) + geom_histogram() + facet_wrap(~heart_attack)
ggplot(data, aes(x=bmi, fill=heart_attack)) + geom_boxplot()
# We can add in other variables
ggplot(data, aes(x=bmi, y=chl, color=heart_attack)) + geom_point()
nhanes_copy <- nhanes
# Investigate the missingness patterns
md.pattern(nhanes_copy)
nhanes_copy
nhanes_copy <- nhanes
nhanes_copy
view(nhanes_copy)
if(!require(klaR)) install.packages("klaR")
if(!require(tidyverse)) install.packages("tidyverse")
if(!require(skimr)) install.packages("skimr")
if(!require(FactoMineR)) install.packages("FactoMineR")
if(!require(factoextra)) install.packages("factoextra")
if(!require(mlbench)) install.packages("mlbench") # contains various datasets
if(!require(ISLR)) install.packages("ISLR") # contains various datasets
if(!require(caret)) install.packages("caret")
if(!require(caretEnsemble)) install.packages("caretEnsemble")
if(!require(RANN)) install.packages("RANN")
if(!require(rpart)) install.packages("rpart")
if(!require(ranger)) install.packages("ranger")
if(!require(e1071)) install.packages("e1071")
if(!require(arules)) install.packages("arules")
if(!require(arulesViz)) install.packages("arulesViz")
if(!require(mice)) install.packages("mice")
if(!require(NbClust)) install.packages("NbClust")
library(klaR) # used for Naive-Bayes. Must be called before tidyverse, otherwise it masks `select` method
library(shiny); runApp('C:/Users/Varun/Downloads/live_coding_gapminder.R')
help(shiny)
1:5
c(1:5)
runApp('D:/UK/assignment/DSA8022/shiny-1.R')
runApp('D:/UK/assignment/DSA8022/shiny-1.R')
runApp('D:/UK/assignment/DSA8022/shiny-1.R')
runApp('shiny-1.R')
runApp('shiny-1.R')
runApp('shiny-1.R')
runApp('shiny-1.R')
runApp('D:/UK/assignment/DSA8022/shiny-1.R')
runApp('D:/UK/assignment/DSA8022/shiny-1.R')
runApp('D:/UK/assignment/DSA8022/shiny-1.R')
runApp('D:/UK/assignment/DSA8022/shiny-1.R')
runApp('D:/UK/assignment/DSA8022/shiny-1.R')
runApp('D:/UK/assignment/DSA8022/shiny-1.R')
runApp('D:/UK/assignment/DSA8022/shiny-1.R')
runApp('D:/UK/assignment/DSA8022/shiny-1.R')
runApp('C:/Users/Varun/Downloads/VADSA8022 Practical Assessment - Visual Analytics copy.R')
runApp('C:/Users/Varun/Downloads/VADSA8022 Practical Assessment - Visual Analytics copy.R')
runApp('C:/Users/Varun/Downloads/VADSA8022 Practical Assessment - Visual Analytics copy.R')
runApp('C:/Users/Varun/Downloads/VADSA8022 Practical Assessment - Visual Analytics copy.R')
runApp('C:/Users/Varun/Downloads/VADSA8022 Practical Assessment - Visual Analytics copy.R')
runApp('D:/UK/assignment/DSA8022/shiny-1.R')
runApp('shiny-1.R')
runApp('D:/UK/assignment/DSA8022/shiny-1.R')
runApp('D:/UK/assignment/DSA8022/shiny-1.R')
runApp('D:/UK/assignment/DSA8022/shiny-1.R')
runApp('D:/UK/assignment/DSA8022/shiny-1.R')
runApp('D:/UK/assignment/DSA8022/shiny-1.R')
runApp('D:/UK/assignment/DSA8022/shiny-1.R')
head(mcycle)
library(MASS, lib.loc = "C:/Program Files/R/R-4.2.0/library")
detach("package:MASS", unload = TRUE)
head(mcycle)
help(mcycle)
library(MASS)
help(mcycle)
source("D:/UK/assignment/DSA8022/shiny-1.R", echo=TRUE)
lm_mod <- lm(times~accel ,data=mcycle)
plot(lm_mod)
source("D:/UK/assignment/DSA8022/shiny-1.R", echo=TRUE)
termplot(lm_mod)
termplot(lm_mod, se=TRUE)
termplot(lm_mod, partial.resid = TRUE, se=TRUE)
termplot(lm_mod, partial.resid = TRUE)
termplot(lm_mod, partial.resid = TRUE, se = TRUE)
source("D:/UK/assignment/DSA8022/shiny-1.R", echo=TRUE)
source("D:/UK/assignment/DSA8022/shiny-1.R", echo=TRUE)
lm_mod <- lm(times~accel ,data=mcycle)
source("D:/UK/assignment/DSA8022/shiny-1.R", echo=TRUE)
source("D:/UK/assignment/DSA8022/shiny-1.R", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gratia)
library(mgcv)
anscombe_m <- data.frame()
for(i in 1:4)
anscombe_m <- rbind(anscombe_m, data.frame(set=i, x=anscombe[,i], y=anscombe[,i+4]))
ggplot(anscombe_m, aes(x, y)) +
theme_bw(base_size=18) +
geom_point(size=3, color="red", fill="orange", shape=21) +
geom_smooth(method="lm", fill=NA, fullrange=TRUE) +
facet_wrap(~set, ncol=2)
# from https://gist.github.com/amoeba/7576126
set.seed(42)
x <- seq(0,2*pi,0.1)
z <- sin(x)
randomError <- rnorm(mean=0, sd=0.5*sd(z), n=length(x))
y <- z + randomError
curveData <- cbind.data.frame(x,y,z)
library(mgcv)
model2 <- lm(y ~ x, data = curveData)
summary(model2)
print("-----------------------------")
model3 <- gam(y ~ s(x), data = curveData, method = "REML")
summary(model3)
plot(model3, residuals = TRUE, se=TRUE, rug=FALSE, pch = 1, cex = 0.5) # shade = TRUE, shade.col = "rosybrown2"
plot(model3, residuals = TRUE, se=TRUE, rug=FALSE, pch = 1, cex = 0.5, shade = TRUE, shade.col = "rosybrown2")
curveData$predicted <- predict(model3)   # Save the predicted values
curveData$residuals <- residuals(model3) # Save the residual values
ggplot(data=curveData, aes(x=x, y=y)) +
geom_point() +
geom_point(colour = "red") +
#geom_smooth(method = "lm", se = FALSE, size = 1) +
geom_path(aes(x=x, y=predicted), colour = "blue") +
geom_point(aes(y = predicted), shape = 1) +
geom_segment(aes(xend = x, yend = predicted), alpha = .5) +
geom_text(aes(y = predicted+(residuals/2), label = paste0("", round(residuals, 1), "")), size=2.5)
print(sum((y-z)^2)) # the sum of squares of the residuals against the true model, the sine wave
print(sum(curveData$residuals^2)) # the sum of squares of the GAM residuals
curveData$predicted <- predict(model3)   # Save the predicted values
curveData$residuals <- residuals(model3) # Save the residual values
ggplot(data=curveData, aes(x=x, y=y)) +
geom_point() +
geom_point(colour = "red") +
geom_smooth(method = "lm", se = FALSE, size = 1) +
geom_path(aes(x=x, y=predicted), colour = "blue") +
geom_point(aes(y = predicted), shape = 1) +
geom_segment(aes(xend = x, yend = predicted), alpha = .5) +
geom_text(aes(y = predicted+(residuals/2), label = paste0("", round(residuals, 1), "")), size=2.5)
print(sum((y-z)^2)) # the sum of squares of the residuals against the true model, the sine wave
print(sum(curveData$residuals^2)) # the sum of squares of the GAM residuals
coef(model3)
#bs <- basis(s(x0), data = curveData)
#draw(bs)
df <- gamSim(4, n = 400, verbose = FALSE)
bf <- basis(s(x0, bs = "bs"), data = df)
draw(bf)
#bs <- basis(s(x0), data = curveData)
#draw(bs)
df <- gamSim(4, n = 400, verbose = FALSE)
bf <- basis(s(x0), data = df)
draw(bf)
bs <- basis(s(x0), data = curveData)
#bs <- basis(s(x0), data = curveData)
#\draw(bs)
df <- gamSim(4, n = 400, verbose = FALSE)
bf <- basis(s(x0, bs = "bs"), data = df)
draw(bf)
gam.check(model3)
k.check(model3)
appraise(model3)
draw(model3, rug = FALSE)
draw(model3)
draw(model3, rug = FALSE)
draw(model3)
draw(model3)
draw(model3, rug = FALSE)
model3$smooth[[1]]$bs.dim
print(coef(lm(Skill ~ Time, data = linearRegression1)))
knitr::opts_chunk$set(echo = TRUE)
require(dplyr)
require(tibble)
require(ggplot2)
library(tidytext)
library(plotly)
by_newsSource_pos <- Combined %>%
group_by(newsSource) %>%
summarise(meanPos = mean(posemo))
knitr::opts_chunk$set(echo = TRUE)
require(dplyr)
require(tibble)
require(ggplot2)
library(tidytext)
library(plotly)
by_newsSource_pos <- Combined %>%
group_by(newsSource) %>%
summarise(meanPos = mean(posemo))
knitr::opts_chunk$set(echo = TRUE)
require(dplyr)
require(tibble)
require(ggplot2)
library(tidytext)
library(plotly)
knitr::opts_chunk$set(echo = TRUE)
require(dplyr)
require(tibble)
require(ggplot2)
library(tidytext)
library(plotly)
knitr::opts_chunk$set(echo = TRUE)
require(dplyr)
require(tibble)
require(ggplot2)
library(tidytext)
library(plotly)
by_newsSource_pos <- Combined %>%
group_by(newsSource) %>%
summarise(meanPos = mean(posemo))
Combined <- read.csv('./Combined.csv')
by_newsSource_pos <- Combined %>%
group_by(newsSource) %>%
summarise(meanPos = mean(posemo))
ggplot(by_newsSource_pos, aes(x=newsSource, y=meanPos))+
geom_bar(stat = "identity", aes(fill = factor(newsSource)))
by_newsSource_neg <- Combined %>%
group_by(newsSource) %>%
summarise(meanNeg = mean(negemo))
ggplot(by_newsSource_neg, aes(x=newsSource, y=meanNeg))+
geom_bar(stat = "identity", aes(fill = factor(newsSource)))
Combined <- Combined %>%
mutate(polarity = posemo - negemo)
by_newsSource_pol <- Combined %>%
group_by(newsSource) %>%
summarise(meanPol = mean(polarity))
ggplot(by_newsSource_pol, aes(x=newsSource, y=meanPol))+
geom_bar(stat = "identity", aes(fill = factor(newsSource)))
by_newsSource_anx <- Combined %>%
group_by(newsSource) %>%
summarise(meanAnx = mean(anx))
ggplot(by_newsSource_anx, aes(x=newsSource, y=meanAnx))+
geom_bar(stat = "identity", aes(fill = factor(newsSource)))+
geom_hline(yintercept = 0.25)
by_newsSource_ang <- Combined %>%
group_by(newsSource) %>%
summarise(meanAng = mean(anger))
ggplot(by_newsSource_ang, aes(x=newsSource, y=meanAng))+
geom_bar(stat = "identity", aes(fill = factor(newsSource))) +
geom_hline(yintercept = 0.47)
by_newsSource_sad <- Combined %>%
group_by(newsSource) %>%
summarise(meanSad = mean(sad))
ggplot(by_newsSource_sad, aes(x=newsSource, y=meanSad))+
geom_bar(stat = "identity", aes(fill = factor(newsSource))) +
geom_hline(yintercept = 0.29)
Combined_Tidy <- Combined_Tidy %>%
mutate(title=as.character(title))
headline_Warriner <- headline_Warriner %>%
anti_join(stop_words, by = c("word" = "word"))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(irr)
library(kableExtra)
# this data comes from the examples in the kripp.alpha documentation
missingData<-matrix(c(1,1,NA,1,2,2,3,2,3,3,3,3,3,3,3,3,2,2,2,2,1,2,3,4,4,4,4,4,
1,1,2,1,2,2,2,2,NA,5,5,5,NA,NA,1,1,NA,NA,3,NA),nrow=4)
missingData %>%
kbl() %>%
kable_paper("hover", full_width = F)
library(irrNA)
missingDataT <- t(missingData)
output <- iccNA(missingDataT)
output
Combined_Tidy <- Combined_Tidy %>%
mutate(title=as.character(title))
Combined_Tidy <- read.csv('./Ratings_WarrinerVAD.csv')
Combined_Tidy <- Combined_Tidy %>%
mutate(title=as.character(title))
Combined_Tidy <- read.csv('./NetflixReviewsPosNeg.csv')
Combined_Tidy <- Combined_Tidy %>%
mutate(title=as.character(title))
Combined_Tidy <- read.csv('./NetflixReviewsPosNeg.csv')
Combined_Tidy <- Combined_Tidy %>%
mutate(title=as.character(Review))
Combined_Tidy <- as_tibble(Combined_Tidy)
headline_words <- Combined_Tidy %>%
unnest_tokens(word, title)
headline_Warriner <- headline_words %>%
inner_join(Ratings_WarrinerVAD, by = "word")
Combined_Tidy <- read.csv('./NetflixReviewsPosNeg.csv')
Ratings_WarrinerVAD <- read.csv('./Ratings_WarrinerVAD.csv')
Combined_Tidy <- Combined_Tidy %>%
mutate(title=as.character(Review))
Combined_Tidy <- as_tibble(Combined_Tidy)
headline_words <- Combined_Tidy %>%
unnest_tokens(word, title)
headline_Warriner <- headline_words %>%
inner_join(Ratings_WarrinerVAD, by = "word")
by_newsSource_val <- headline_Warriner %>%
group_by(newsSource) %>%
summarise(meanVal = mean(Valence))
library(shiny); runApp('D:/UK/assignment/DSA8022/Visual/VADSA8022 Practical Assessment - Visual Analytics copy (1).R')
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
library(shiny); runApp('D:/UK/assignment/DSA8022/Visual/VADSA8022 Practical Assessment - Visual Analytics copy (1).R')
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
library(shiny); runApp('D:/UK/assignment/DSA8022/Visual/VADSA8022 Practical Assessment - Visual Analytics copy (1).R')
install.packages(c("arulesViz", "bit", "blob", "broom", "bslib", "cachem", "callr", "caretEnsemble", "classInt", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "future", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "jsonlite", "klaR", "knitr", "lava", "lme4", "lubridate", "markdown", "Matrix", "minqa", "modelr", "openssl", "packrat", "pbkrtest", "pkgload", "processx", "ps", "purrr", "questionr", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "repr", "rlang", "rmarkdown", "rsconnect", "rstatix", "sass", "scatterplot3d", "seriation", "sourcetools", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyverse", "tinytex", "TSP", "utf8", "vcd", "vctrs", "vroom", "xfun", "yaml"))
library(shiny); runApp('C:/Users/Varun/Downloads/temp.r')
runApp('C:/Users/Varun/Downloads/temp.r')
runApp('C:/Users/Varun/Downloads/temp.r')
runApp('D:/UK/assignment/DSA8022/shiny.R')
source("D:/UK/assignment/DSA8023/Q1.R", echo=TRUE)
source("D:/UK/assignment/DSA8023/Q1.R", echo=TRUE)
source("D:/UK/assignment/DSA8023/Q1.R", echo=TRUE)
source("D:/UK/assignment/DSA8023/Q1.R", echo=TRUE)
source("D:/UK/assignment/DSA8023/Q1.R", echo=TRUE)
getwd()
source("D:/UK/assignment/DSA8023/Q1.R", echo=TRUE)
source("D:/UK/assignment/DSA8023/Q1.R", echo=TRUE)
source("D:/UK/assignment/DSA8023/Q1.R", echo=TRUE)
source("D:/UK/assignment/DSA8023/Q1.R", echo=TRUE)
head(temp2)
source("D:/UK/assignment/DSA8023/Q1.R", echo=TRUE)
View(temp1)
raw_data
source("D:/UK/assignment/DSA8023/Q1.R", echo=TRUE)
source("D:/UK/assignment/DSA8023/Q1.R", echo=TRUE)
head(raw_data)
source("D:/UK/assignment/DSA8023/Q1.R", echo=TRUE)
library(readxl)
library(tidyverse)
setwd("D:/UK/assignment/DSA8023")
#load datasets
temp1 <- read_excel("./WB1_Energia_Challenge_March_2023_Data.xlsx", sheet = 2)
temp2 <- read_excel("./WB2_Energia_Challenge_March_2023_Data.xlsx", sheet= 2)
#combine datasets
raw_data = rbind(temp1, temp2)
head(raw_data)
columns(raw_data)
column(raw_data)
library(readxl)
library(tidyverse)
setwd("D:/UK/assignment/DSA8023")
#load datasets
temp1 <- read_excel("./WB1_Energia_Challenge_March_2023_Data.xlsx", sheet = 2)
temp2 <- read_excel("./WB2_Energia_Challenge_March_2023_Data.xlsx", sheet= 2)
#combine datasets
raw_data = rbind(temp1, temp2)
colnames(raw_data)
summary(raw_data)
data$ageBand
#combine datasets
data = rbind(temp1, temp2)
summary(data)
data$ageBand
data$agedBand
factors(data$agedBand)
factors(data$agedBand)
factor(data$agedBand)
levels(factor(data$agedBand))
ggplot(data, aes(x = agedBand))
ggplot(data, aes(x = agedBand))
ggplot(data, aes(x = agedBand)) + geom_bar()
library(readxl)
library(tidyverse)
library(dplyr)
library(ggplot2)
setwd("D:/UK/assignment/DSA8023")
#load datasets
temp1 <- read_excel("./WB1_Energia_Challenge_March_2023_Data.xlsx", sheet = 2)
temp2 <- read_excel("./WB2_Energia_Challenge_March_2023_Data.xlsx", sheet= 2)
#combine datasets
data = rbind(temp1, temp2)
summary(data)
levels(factor(data$agedBand))
ggplot(data, aes(x = agedBand, fill = EV)) + geom_bar()
levels(factor(data$EV_New_or_Old))
library(readxl)
library(tidyverse)
library(dplyr)
library(ggplot2)
setwd("D:/UK/assignment/DSA8023")
#load datasets
temp1 <- read_excel("./WB1_Energia_Challenge_March_2023_Data.xlsx", sheet = 2)
temp2 <- read_excel("./WB2_Energia_Challenge_March_2023_Data.xlsx", sheet= 2)
#combine datasets
data = rbind(temp1, temp2)
summary(data)
levels(factor(data$EV_New_or_Old))
nonEVCustomers <- data %>% filter(EV_New_or_Old == "Non-EV Customers")
ggplot(nonEVCustomers, aes(x = agedBand, fill = EV)) + geom_bar()
temp2 <- read_excel("./WB2_Energia_Challenge_March_2023_Data.xlsx", sheet= 2)
library(readxl)
library(tidyverse)
library(dplyr)
library(ggplot2)
setwd("D:/UK/assignment/DSA8023")
#load datasets
temp1 <- read_excel("./WB1_Energia_Challenge_March_2023_Data.xlsx", sheet = 2)
temp2 <- read_excel("./WB2_Energia_Challenge_March_2023_Data.xlsx", sheet= 2)
#combine datasets
data = rbind(temp1, temp2)
summary(data)
levels(factor(data$EV_New_or_Old))
nonEVCustomers <- data %>% filter(EV_New_or_Old == "Non-EV Customers")
ggplot(nonEVCustomers, aes(x = agedBand, fill = EV)) + geom_bar()
#combine datasets
data = rbind(temp1, temp2)
summary(data)
levels(factor(data$EV_New_or_Old))
nonEVCustomers <- data %>% filter(EV_New_or_Old == "Non-EV Customers")
ggplot(nonEVCustomers, aes(x = agedBand, fill = mosaicType)) + geom_bar()
#combine datasets
data = rbind(temp1, temp2)
levels(factor(data$EV_New_or_Old))
nonEVCustomers <- data %>% filter(EV_New_or_Old == "Non-EV Customers")
ggplot(nonEVCustomers, aes(x = agedBand, fill = mosaicType)) + geom_bar()
ggplot(nonEVCustomers, aes(x = agedBand, fill = mosaicType)) + geom_bar() + coord_polar()
ggplot(nonEVCustomers, aes(x = mosaicType, fill = agedBand )) + geom_bar() + coord_polar()
ggplot(nonEVCustomers, aes(x = mosaicType, fill = agedBand )) + geom_bar() + coord_polar('y', start=0)
ggplot(nonEVCustomers, aes(x = mosaicType )) + coord_polar('y', start=0)
+ geom_bar()
ggplot(nonEVCustomers, aes(x = mosaicType, fill = agedBand )) + geom_bar() + coord_polar('y', start=0)
ggplot(nonEVCustomers, aes(x = mosaicType, fill = agedBand )) + geom_bar() + coord_polar()
mosaicType
ggplot(nonEVCustomers, aes(x = agedBand, fill = mosaicType)) + geom_bar()
ggplot(nonEVCustomers, aes(x = "", y = mosaicType, fill = ageBand)) +
geom_col() +
coord_polar(theta = "y")
ggplot(nonEVCustomers, aes(x = "", y = mosaicType, fill = agedBand)) +
geom_col() +
coord_polar(theta = "y")
ggplot(nonEVCustomers, aes(x = "", y = mosaicType, fill = agedBand)) +
geom_col() +
coord_polar(theta = "y")
